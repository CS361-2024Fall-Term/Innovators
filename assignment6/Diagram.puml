@startuml

class User {
  +Name: String
  +University: String
  +Age: int
  +Major: String
  +Dark_mode: Boolean
  +Font_size: int
  +setName(params:String): void
  +setUni(param: String): void
  +setAge(param: int): void
  +setMajor(param: String): void
  +setFsize(param: int): void
  +setMode(param: boolean): void
  +getName(): String
  +getUni(): String
  +getAge(): int
  +getMajor(): String
  +getFsize(): int
  +getMode(): Boolean
 
}

class Calendar {
  -unique_id: int  
  -task_amount: int
  -event_amount: int
  +add_task(unique_id: int, name: String, description: String, due_date: Date): void
  +remove_task(task_id): void
  +edit_task(event_id): void
  +add_event(unique_id: int, name: String, description: String, start_time: Date, end_time: Date, location: String): void
  +remove_event(param: event_id): void
  +edit_event(param: event_id): void
  +get_tasks_by_date(date: Date): List <Task>
  +get_tasks_by_name(string: Name): List <Task>
  +get_events_by_date(): list <Event>
  +get_events_by_name(): list <Event>
  +get_events_by_location(): list <Event>
  +set_task_num(int): void
  +set_event_num(int): void
  +get_task_num(): int
  +get_event_num(): int
}

class Task {
  +unique_id: int
  +title: string
  +description: string
  +due_date: Date
  +priority: int
  +status: int
  +create_task(params: int, string, string, Date): int
  +set_title(param: String): void
  +set_date(param: Date): void
  +set_description(param: String): void
  +set_priority(param: int): void
  +complete(): void
  +get_status(): int
  +get_due_date(): Date
}

class Category {
  +title: String
  +color: String
}

class Notification {
  +unique_id: int  
  +date: Date
  +alert: string
  
  +set_reminder_time(param: Date): void
  +set_alert(param: string): void
  +get_tasks_by_date(): List<Task>
  +get_task_name(param: Task): void
  +get_task_status(param: Task): void
  +get_events_by_date(): List<Task>
  +get_event_name(param: Task): void
  +get_event_status(param: Task): void
  +create_feedback(param: Task): void
  +display_notification(): void
}

class Event {
  +unique_id: int  
  +name: string
  +description: string
  +start_time: Date
  +end_time: Date
  +location: string
  +create_event(string, string, string, string, Date, Date): int
  +set_name(param: string): void
  +set_description(param: string): void
  +set_location(param: string): void
  +set_start_time(param: Date): void
  +set_end_time(param: Date): void
  +get_events_by_name(): List<Event>
  +get_events_by_date(): List<Event>
  +get_events_by_location(): List<Event>
}

class Daily_Overview {
    -unique_id: int
    -date: Date
    -tasks_for_today: list<tasks>
    -overview_prompt: String

    +display_overview_prompt(): void
    +get_tasks_for_today(calendar: get_tasks_by_date()): List<Task>
    +sort_tasks_by_priority(): void
    +sort_tasks_by_due_time(): void
    +add_relevant_info(param: String): void
}

class Management {
  +manageUser(): void
  +manageCalendar(): void
  +CreateTasks(param: Task): void
  +CreateEvents(param: Event): void
  +sendNotifications(): void
}

Management -- User
Management -- Calendar
Management -- Task
Management -- Event
Management -- Notification

Calendar "1" -- "1" User
Calendar "1" *-- "0 *" Task : "has"
Calendar "1" *-- "0 *" Event : "has"
Calendar "1" o-- "1" Daily_Overview : "generates"
Task "0" *-- "1" Category


@enduml
